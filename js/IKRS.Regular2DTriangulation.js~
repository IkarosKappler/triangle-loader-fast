/**
 * This class makes overlaying triangle patterns of regular triangles.
 *
 * It uses the create.js library.
 *
 * Please have jQuery installed (for relative mouse positions).
 *
 * @author  Ikaros Kappler
 * @date    2016-02-26
 * @version 1.0.1
 **/




/**
 * The constructor.
 *
 * The options object needs to have these members:
 * @param {canvas} options.canvas
 * @param {WebGL-Context} options.context
 * @param {number}  options.size   
 * @param {number}  options.height (optional, default is a equal-sided triangle).
 * @param {int}     options.width 
 * @param {int}     options.height 
 * @param {object}  options.origin { x, y }
 * @param {boolean} options.up     Indicates if the first triangle is upside.
 * @param {function} options.onmousein
 * @param {function} options.onmouseout
 *  -
 **/
IKRS.Regular2DTriangulation = function( options ) {

    IKRS.Object.call( this, options );

    this.options = options;
    if( typeof this.options.size == "undefined" )
	this.options.size = 32;
    if( typeof options.triangleHeight == "undefined" )
	this.options.triangleHeight = Math.sqrt( Math.pow(this.options.size,2) - Math.pow(this.options.size/2.0,2) );
    if( typeof options.width == "undefined" )
	this.options.width = 800;
    if( typeof options.height == "undefined" )
	this.options.height = 600;
    if( typeof options.origin == "undefined" )
	this.options.origin = { x : this.options.width/2.0, y : this.options.height/2.0 };
    if( typeof options.up == "undefined" )
	this.options.up = false;

    //this.options.context = this.options.canvas.getContext( "2d" );

    this.matrix        = new Array();
    this.triangleCount = 0;
    this._makeTriangles( this.options.size,
			 this.options.origin			 
		       );

    
    // Add listeners to canvas object
    var mouseOverMap = {};  // Triangle-ID -> Triangle
    var _self = this;
    var toRelativePosition = function( event ) {
	var tmp = $( event.target );
	return new IKRS.Regular2DTriangulation.Point( event.clientX - tmp.offset().left + $(window).scrollLeft() - _self.options.origin.x,
						      event.clientY - tmp.offset().top + $(window).scrollTop() - _self.options.origin.y );
    };
    var onMouseOver = function( event )  {
    };
    var onMouseMove = function( event ) {
	var position = toRelativePosition(event);
	//processMouseEvent( "mousemove", event );
	var triangle = _self.getTriangleAt( position );
	triangle.color = "#880088";
	triangle.draw( _self.options.context );
    };
    var onMouseOut = function( event ) {
    };
    this.options.canvas.addEventListener( "mousemove", onMouseMove );

};

IKRS.Regular2DTriangulation.prototype                = Object.create( IKRS.Object.prototype );
IKRS.Regular2DTriangulation.prototype.constructor    = IKRS.Regular2DTriangulation;


IKRS.Regular2DTriangulation.Point = function(x, y) {
    this.x = x;
    this.y = y;
    this.clone = function() { return new IKRS.Regular2DTriangulation.Point(this.x,this.y); };
    this.toString = function() { return "{ x : " + this.x + ", y : " + this.y + " }"; };
};

IKRS.Regular2DTriangulation.Polygon = function( points ) {
    this.points   = points; // array
    this.position = new IKRS.Regular2DTriangulation.Point(0,0);
    this.color    = null;

    this.addEventListener = function( eventName,
				      listener 
				    ) {
	// ...
    };

    this.draw = function( context ) {
	// console.debug( "Draw at " + this.position + ", color=" + this.color );
    	context.fillStyle   = this.color;
	context.strokeStyle = this.color;
	context.beginPath();
	context.moveTo( this.position.x+this.points[0].x, 
			this.position.y+this.points[0].y 
		      );
	for( var i = 1; i < this.points.length; i++ ) {
	    context.lineTo( this.position.x+this.points[i].x, 
			    this.position.y+this.points[i].y 
			  );
	}
	context.closePath();
	context.stroke();
	context.fill();
    };
};

/**
 * position is absolute (from upper left corner).
 **/
IKRS.Regular2DTriangulation.prototype.getTriangleAt = function( position ) {

    // Event the triangulated surface has a squared raster.
    // -> locate the square (this may contain up to 3 triangles).
    var v = this._locateRow( position.y );
    var h = this._locateColumn( position.x );
    //console.debug( "[locateTriangleAt] position=" + position + ", row=" + v + ", column=" + h );
    // Get the candidate and it's neighbours
    var left   = this.getTriangle(h-1,v);
    var middle = this.getTriangle(h,v);
    var right  = this.getTriangle(h+1,v);
    var dummyPoint = position.clone();

    //if( true )
//	return middle;

    //console.debug( "left=" + left.position + ", middle=" + middle.position + ", right=" + right.position + ", dummy=" + dummyPoint );
    //dummyPoint.x += middle.position.x;
    //dummyPoint.y += middle.position.y;
/*
    if( left && IKRS.Regular2DTriangulation.pointIsInTriangle(dummyPoint,left.points[0],left.points[1],left.points[2]) )
	return left;
    if( right && IKRS.Regular2DTriangulation.pointIsInTriangle(dummyPoint,right.points[0],right.points[1],right.points[2]) )
	return right;
    if( middle && IKRS.Regular2DTriangulation.pointIsInTriangle(dummyPoint,middle.points[0],middle.points[1],middle.points[2]) )
	return middle;
*/
    if( middle && 
	IKRS.Regular2DTriangulation.pointIsInTriangle(
	    dummyPoint.x,
	    dummyPoint.y,
	    middle.points[0].x+middle.position.x-this.options.origin.x,
	    middle.points[0].y+middle.position.y-this.options.origin.y,
	    middle.points[1].x+middle.position.x-this.options.origin.x,
	    middle.points[1].y+middle.position.y-this.options.origin.y,
	    middle.points[2].x+middle.position.x-this.options.origin.x,
	    middle.points[2].y+middle.position.y-this.options.origin.y
	) )
	return left;
    
    return null; // Not found
};

IKRS.Regular2DTriangulation.prototype._locateRow = function( y ) {
    // Make y relative
    y += this.options.triangleHeight/2.0;
    return Math.floor( y / this.options.triangleHeight );
};

IKRS.Regular2DTriangulation.prototype._locateColumn = function( x ) {
    // Make y relative
    //x -= this.options.origin.x;
    return Math.floor( x / (this.options.size/2.0) );
};

IKRS.Regular2DTriangulation.prototype.getTriangle = function( h, v ) {
    if( !this.matrix[h] || !this.matrix[h][v] )
	return null;
    return this.matrix[h][v];
};

/**
 * Fill the area with triangles.
 **/
IKRS.Regular2DTriangulation.prototype._makeTriangles = function( size,
								 origin
							       ) {
    console.debug( "_makeTriangles" );
    
    var tLength = this.options.size;
    var tHeight = this.options.triangleHeight; // Math.sqrt( Math.pow(this.options.size,2) - Math.pow(this.options.size/2.0,2) );

    var up = this.options.up; // true;
    // Draw triangle rows down from origin
    var id     = 0;
    var hIndex = 0;
    //console.debug( "origin=" + this.options.origin );
    for( var x = this.options.origin.x; x < this.options.width+tLength/2.0; x+= tLength/2.0 ) {
	this._makeTriangleColumn( { x : x, //this.options.origin.x,
				    y : this.options.origin.y
				  },
				  tLength,
				  tHeight,
				  up,     // center triangle up?
				  hIndex
				);
	hIndex++;
	up = !up;
    }
    // Draw triangle rows up from origin
    up = !this.options.up; // false;
    hIndex = -1;
    for( var x = this.options.origin.x-tLength/2.0; x >= -tLength/2.0; x-= tLength/2.0 ) {
	this._makeTriangleColumn( { x : x, //this.options.origin.x,
				    y : this.options.origin.y
				  },
				  tLength,
				  tHeight,
				  up,     // center triangle up?
				  hIndex
			     );
	hIndex--;
	up = !up;
    }
};

IKRS.Regular2DTriangulation.prototype._makeTriangleColumn = function( pos,
								      tLength,
								      tHeight,
								      up,
								      hIndex
								    ) {
    // Build row to the right
    this.matrix[ hIndex ] = new Array();
    var tmpUp  = up;
    var vIndex = 0;
    for( var y = pos.y; y <= this.options.height; y+= tHeight ) {	
	var triangle = this._makeTriangleAt( { x : pos.x,
					       y : y
					     },
					     tLength,
					     tHeight,
					     tmpUp,
					     hIndex, vIndex
					   );
	vIndex++;
	tmpUp = !tmpUp;
	// this.options.stage.addChild( triangle );	
    }

    // Build row to the left
    //var tmpUp = up;
    tmpUp  = !up;
    vIndex = -1;
    for( var y = pos.y-tHeight; y >= 0; y-= tHeight ) {	
	var triangle = this._makeTriangleAt( { x : pos.x,
					       y : y
					     },
					     tLength,
					     tHeight,
					     tmpUp,
					     hIndex, vIndex
					   );
	vIndex--;
	tmpUp = !tmpUp;
		
    }
    
    //this.options.stage.update();
};

IKRS.Regular2DTriangulation.prototype._makeTriangleAt = function( pos,
								  tLength,
								  tHeight,
								  up,
								  hIndex,
								  vIndex
								) {
    // Draw outline?
    //triangle.graphics.beginStroke("black").setStrokeStyle(1);
    var color = "#"+((1<<24)*Math.random()|0).toString(16);
    var points = [];
    if( up ) {
	points.push( new IKRS.Regular2DTriangulation.Point( 0          , -tHeight/2.0 ) );
	points.push( new IKRS.Regular2DTriangulation.Point( tLength/2.0,  tHeight/2.0 ) );
	points.push( new IKRS.Regular2DTriangulation.Point(-tLength/2.0,  tHeight/2.0 ) );
    } else { // down
	points.push( new IKRS.Regular2DTriangulation.Point( 0          ,  tHeight/2.0 ) );
	points.push( new IKRS.Regular2DTriangulation.Point(-tLength/2.0, -tHeight/2.0 ) );
	points.push( new IKRS.Regular2DTriangulation.Point( tLength/2.0, -tHeight/2.0 ) );
    }
    var triangle          = new IKRS.Regular2DTriangulation.Polygon( points );
    triangle.color        = color;
    triangle.points       = points;       
    triangle.position.x  += pos.x;
    triangle.position.y  += pos.y;   
    triangle.hIndex       = hIndex;
    triangle.vIndex       = vIndex;
    triangle.id           = this.triangleCount;
    
    this.matrix[ hIndex ][ vIndex ] = triangle;
    this.triangleCount++;

    if( typeof this.options.onTriangleInit == "function" )
	this.options.onTriangleInit( triangle );

    //IKRS.Regular2DTriangulation.fillTriangle( triangle );
    //this.options.stage.addChild( triangle );
    //triangle.draw( context );
    // return triangle;
};

/*
IKRS.Regular2DTriangulation.fillTriangle = function( triangle ) { //graphics, points, color) {
	//console.debug( "draw ... ");
    triangle.graphics.beginFill( triangle.color );
    triangle.graphics.beginStroke( triangle.color ).setStrokeStyle(1.0);
    triangle.graphics.drawPolygon( 0, 0, triangle.points );
    triangle.graphics.endStroke();
    triangle.graphics.endFill();
};
*/

IKRS.Regular2DTriangulation.prototype.draw = function( context ) {
    
    for( var h in this.matrix ) {
	for( var v in this.matrix[h] ) {
	    this.matrix[h][v].draw( context );
	}
    }
};

/**
 * Point-in-Triangle test found at
 *   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle
 **/
IKRS.Regular2DTriangulation.pointIsInTriangle___ = function( p, t0, t1, t2 ) {
   
    //var area = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);

    //var s = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);
    //var t = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);

    var area = 1/2*(-t1.y*t2.x + t0.y*(-t1.x + t2.x) + t0.x*(t1.y - t2.y) + t1.x*t2.y);

    var s = 1/(2*area)*(t0.y*t2.x - t0.x*t2.y + (t2.y - t0.y)*p.x + (t0.x - t2.x)*p.y);
    var t = 1/(2*area)*(t0.x*t1.y - t0.y*t1.x + (t0.y - t1.y)*p.x + (t1.x - t0.x)*p.y);
    
    return s >= 0 && t >= 0 && (1-s-t) >= 0;
    /*
    var b1, b2, b3;
    b1 = IKRS.Regular2DTriangulation.sign(p, t0, t1) < 0.0;
    b2 = IKRS.Regular2DTriangulation.sign(p, t1, t2) < 0.0;
    b3 = IKRS.Regular2DTriangulation.sign(p, t2, t0) < 0.0;
    return ((b1 == b2) && (b2 == b3));
    */
};
IKRS.Regular2DTriangulation.sign = function( p1, p2, p3 ) {
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
};



/**
 * Point-in-Triangle test found at
 *   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle
 **/
IKRS.Regular2DTriangulation.pointIsInTriangle = function( px, py, _p0x, _p0y, _p1x, _p1y, _p2x, _p2y ) {
  
    var p0x = _p2x;
    var p0y = _p2y;
    var p1x = _p1x;
    var p1y = _p1y;
    var p2x = _p0x;
    var p2y = _p0y;
 
    var area = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);

    var s = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);
    var t = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);

    console.debug( "px=" + px + ", py=" + py + ", p0x=" + p0x + ", p0y=" + p0y + ", p1x=" + p1x + ", p1y=" + p1y + ", p2x=" + p2x + ", p2y=" + p2y + ", s=" + s + ", t=" + t );
/*
    var area = 1/2*(-t1.y*t2.x + t0.y*(-t1.x + t2.x) + t0.x*(t1.y - t2.y) + t1.x*t2.y);

    var s = 1/(2*area)*(t0.y*t2.x - t0.x*t2.y + (t2.y - t0.y)*p.x + (t0.x - t2.x)*p.y);
    var t = 1/(2*area)*(t0.x*t1.y - t0.y*t1.x + (t0.y - t1.y)*p.x + (t1.x - t0.x)*p.y);
  */  
    return s > 0 && t > 0 && (1-s-t) > 0;
    /*
    var b1, b2, b3;
    b1 = IKRS.Regular2DTriangulation.sign(p, t0, t1) < 0.0;
    b2 = IKRS.Regular2DTriangulation.sign(p, t1, t2) < 0.0;
    b3 = IKRS.Regular2DTriangulation.sign(p, t2, t0) < 0.0;
    return ((b1 == b2) && (b2 == b3));
    */
};
